"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, List, Optional
from ntgcalls import Protocol, RTCServer
from ..handlers import HandlersHolder

class BridgedClient(HandlersHolder):
    async def get_call(self, chat_id: int): # -> None:
        ...
    
    async def join_group_call(self, chat_id: int, json_join: str, invite_hash: str, have_video: bool, join_as: Any): # -> None:
        ...
    
    async def request_call(self, user_id: int, g_a_hash: bytes, protocol: Protocol): # -> None:
        ...
    
    async def accept_call(self, user_id: int, g_b: bytes, protocol: Protocol): # -> None:
        ...
    
    async def confirm_call(self, user_id: int, g_a: bytes, key_fingerprint: int, protocol: Protocol): # -> None:
        ...
    
    async def send_signaling(self, user_id: int, data: bytes): # -> None:
        ...
    
    async def discard_call(self, chat_id: int): # -> None:
        ...
    
    async def create_group_call(self, chat_id: int): # -> None:
        ...
    
    async def leave_group_call(self, chat_id: int): # -> None:
        ...
    
    async def get_group_call_participants(self, chat_id: int): # -> None:
        ...
    
    async def change_volume(self, chat_id: int, volume: int, participant: Any): # -> None:
        ...
    
    async def set_call_status(self, chat_id: int, muted_status: Optional[bool], paused_status: Optional[bool], stopped_status: Optional[bool], participant: Any): # -> None:
        ...
    
    async def get_participants(self, input_call: Any): # -> None:
        ...
    
    async def resolve_peer(self, user_id: int): # -> None:
        ...
    
    def is_connected(self): # -> None:
        ...
    
    def no_updates(self): # -> None:
        ...
    
    async def start(self): # -> None:
        ...
    
    @staticmethod
    def package_name(obj): # -> str:
        ...
    
    @staticmethod
    def parse_participant(participant): # -> GroupCallParticipant:
        ...
    
    @staticmethod
    def chat_id(input_peer) -> int:
        ...
    
    @staticmethod
    def user_from_call(call) -> Optional[int]:
        ...
    
    @staticmethod
    def parse_servers(servers) -> List[RTCServer]:
        ...
    
    @staticmethod
    def rnd_id() -> int:
        ...
    
    async def get_dhc(self): # -> None:
        ...
    
    def on_update(self) -> Callable:
        ...
    
    async def get_id(self): # -> None:
        ...
    
    async def get_full_chat(self, chat_id: int): # -> None:
        ...
    


