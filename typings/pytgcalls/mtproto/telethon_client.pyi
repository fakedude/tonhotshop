"""
This type stub file was generated by pyright.
"""

from typing import List, Optional, Union
from ntgcalls import Protocol
from telethon import TelegramClient
from telethon.tl.types import InputGroupCall, PhoneCallProtocol, TypeInputChannel, TypeInputPeer, TypeInputUser
from telethon.tl.types.messages import DhConfig
from ..types import CallProtocol, GroupCallParticipant
from .bridged_client import BridgedClient

class TelethonClient(BridgedClient):
    def __init__(self, cache_duration: int, client: TelegramClient) -> None:
        ...
    
    async def get_call(self, chat_id: int) -> Optional[InputGroupCall]:
        ...
    
    async def get_dhc(self) -> DhConfig:
        ...
    
    async def get_group_call_participants(self, chat_id: int): # -> List[GroupCallParticipant] | None:
        ...
    
    async def get_participants(self, input_call: InputGroupCall) -> List[GroupCallParticipant]:
        ...
    
    async def join_group_call(self, chat_id: int, json_join: str, invite_hash: str, have_video: bool, join_as: TypeInputPeer) -> str:
        ...
    
    async def request_call(self, user_id: int, g_a_hash: bytes, protocol: Protocol):
        ...
    
    async def accept_call(self, user_id: int, g_b: bytes, protocol: Protocol):
        ...
    
    async def confirm_call(self, user_id: int, g_a: bytes, key_fingerprint: int, protocol: Protocol) -> CallProtocol:
        ...
    
    async def send_signaling(self, user_id: int, data: bytes): # -> None:
        ...
    
    async def create_group_call(self, chat_id: int): # -> None:
        ...
    
    async def leave_group_call(self, chat_id: int): # -> None:
        ...
    
    async def discard_call(self, chat_id: int): # -> None:
        ...
    
    async def change_volume(self, chat_id: int, volume: int, participant: TypeInputPeer): # -> None:
        ...
    
    async def set_call_status(self, chat_id: int, muted_status: Optional[bool], paused_status: Optional[bool], stopped_status: Optional[bool], participant: TypeInputPeer): # -> None:
        ...
    
    async def get_full_chat(self, chat_id: int): # -> Any | None:
        ...
    
    @staticmethod
    def parse_protocol(protocol: Protocol) -> PhoneCallProtocol:
        ...
    
    async def resolve_peer(self, user_id: Union[int, str]) -> Union[TypeInputPeer, TypeInputUser, TypeInputChannel]:
        ...
    
    async def get_id(self) -> int:
        ...
    
    def is_connected(self) -> bool:
        ...
    
    def no_updates(self): # -> Literal[False]:
        ...
    
    async def start(self): # -> None:
        ...
    


